version: "3.3"

services:
  mongodb:
    image: ${MONGODB_IMAGE}
    container_name: mongodb
    environment:
      MONGO_INITDB_ROOT_USERNAME: username
      MONGO_INITDB_ROOT_PASSWORD: password
      MONGO_INITDB_DATABASE: template
    ports:
      - 27017:27017
    network_mode: bridge

  zookeeper:
    image: ${ZOOKEEPER_IMAGE}
    container_name: zookeeper
    hostname: zookeeper
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_SERVER_ID: 1
      ZOOKEEPER_CLIENT_PORT: "2181"
      ZOOKEEPER_TICK_TIME: "2000"
      ZOOKEEPER_SERVERS: "zookeeper:22888:23888"
    network_mode: bridge

  kafka:
    image: ${KAFKA_IMAGE}
    container_name: kafka
    hostname: kafka
    ports:
      - "9092:9092"
      - "29092:29092"
    environment:
      KAFKA_ZOOKEEPER_CONNECT: "zookeeper:2181"
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092,PLAINTEXT_HOST://kafka:29092
      KAFKA_BROKER_ID: 1
      KAFKA_BROKER_RACK: "r1"
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_DELETE_TOPIC_ENABLE: "true"
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "false"
      #KAFKA_SCHEMA_REGISTRY_URL: "schemaregistry:8081"
      #KAFKA_LOG4J_ROOT_LOGLEVEL: INFO
      KAFKA_JMX_PORT: 9991
    depends_on:
      - zookeeper
    links:
      - zookeeper
    network_mode: bridge
#
#  schemaregistry:
#    image: ${SCHEMA_REGISTRY_IMAGE}
#    hostname: schemaregistry
#    container_name: schemaregistry
#    environment:
#      SCHEMA_REGISTRY_KAFKASTORE_CONNECTION_URL: "zookeeper:2181"
#      SCHEMA_REGISTRY_HOST_NAME: schemaregistry
#      SCHEMA_REGISTRY_LISTENERS: "http://0.0.0.0:8081"
#    ports:
#      - 8081:8081
#    depends_on:
#      - zookeeper
#      - kafka
#    links:
#      - zookeeper
#      - kafka
#    network_mode: bridge
#
#  schemaregistry-ui:
#    image: ${SCHEMA_REGISTRY_UI_IMAGE}
#    hostname: schemaregistry-ui
#    container_name: schemaregistry-ui
#    ports:
#      - "9001:8000"
#    environment:
#      SCHEMAREGISTRY_URL: http://schemaregistry:8081/
#      PROXY: "true"
#    depends_on:
#      - schemaregistry
#    links:
#      - schemaregistry
#    network_mode: bridge
#
#  kafka-rest-proxy:
#    image: ${KAFKA_REST_PROXY_IMAGE}
#    hostname: kafka-rest-proxy
#    container_name: kafka-rest-proxy
#    ports:
#      - "8082:8082"
#    environment:
#      # KAFKA_REST_ZOOKEEPER_CONNECT: zookeeper:2181
#      KAFKA_REST_LISTENERS: http://0.0.0.0:8082/
#      KAFKA_REST_SCHEMA_REGISTRY_URL: http://schemaregistry:8081/
#      KAFKA_REST_HOST_NAME: kafka-rest-proxy
#      KAFKA_REST_BOOTSTRAP_SERVERS: PLAINTEXT://kafka:9092
#    depends_on:
#      - schemaregistry
#    links:
#      - kafka
#      - schemaregistry
#    network_mode: bridge
#
#  kafka-topics-ui:
#    image: ${KAFKA_TOPICS_UI_IMAGE}
#    hostname: kafka-topics-ui
#    container_name: kafka-topics-ui
#    ports:
#      - "9002:8000"
#    environment:
#      KAFKA_REST_PROXY_URL: "http://kafka-rest-proxy:8082/"
#      PROXY: "true"
#    depends_on:
#      - kafka-rest-proxy
#    links:
#      - kafka-rest-proxy
#    network_mode: bridge

  message-receiver-ms:
    image: message-receiver-ms:latest
    container_name: message-receiver-ms
    ports:
      - 8080:8080
    environment:
      KAFKA_BOOTSTRAP_ADDRESS: "kafka:29092"
      KAFKA_TOPIC_NAME: homeworkMessages
      KAFKA_TOPIC_PARTITIONS: 1
      KAFKA_TOPIC_REPLICAS: 1
    depends_on:
      - kafka
    links:
      - kafka
    network_mode: bridge

  message-persistence-ms:
    image: message-persistence-ms:latest
    container_name: message-persistence-ms
    ports:
      - 8081:8080
    environment:
      KAFKA_BOOTSTRAP_ADDRESS: "kafka:29092"
      KAFKA_TOPIC_NAME: homeworkMessages
      KAFKA_TOPIC_PARTITIONS: 1
      KAFKA_TOPIC_REPLICAS: 1
      KAFKA_GROUP_ID: persister
    depends_on:
      - kafka
    links:
      - kafka
    network_mode: bridge
